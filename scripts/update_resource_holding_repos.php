#!/usr/bin/env php
<?php
/**
 * Update Resource Holding Repos
 *
 * Searches for holding repositories that have been merged and then inserts new versions of those resources
 * with the current repo_ic_id in psql.
 *
 * @author Joseph Glass
 * @license http://opensource.org/licenses/BSD-3-Clause BSD 3-Clause
 * @copyright 2015 the Rector and Visitors of the University of Virginia, and
 *            the Regents of the University of California
 */
// Include the global autoloader generated by composer
include "../vendor/autoload.php";

use \Monolog\Logger;
use \Monolog\Handler\StreamHandler;

// Set up the global log stream
$log = new StreamHandler(\snac\Config::$LOG_DIR . \snac\Config::$SERVER_LOGFILE, Logger::DEBUG);

// SNAC Postgres DB Connector
$db = new \snac\server\database\DatabaseConnector();


// find rep_ic_ids, join them via ic_id lookup, any that do not match
// TODO: Limit to a time period of cronjob frequency (past day?)
$result = $db->query("SELECT DISTINCT repo_ic_id, cl.current_ic_id FROM resource_cache rc
                       LEFT JOIN constellation_lookup cl ON rc.repo_ic_id = cl.ic_id
                       WHERE cl.ic_id != cl.current_ic_id",
                       array()
                   );
$merged_repo_ids = $db->fetchAll($result);
// [ ["repo_ic_id" => "76782273", "current_ic_id" => "83120764"] ]

// TODO: Break if no recent merges found.

$db->prepare("update_repo_ic_id",
"INSERT INTO resource_cache (id, version, is_deleted, href, type, title, abstract, extent, repo_ic_id )
 SELECT id, $1, is_deleted, href, type, title, abstract, extent, $2 from resource_cache where id = $3 and version = $4;");


// For each resource belonging to merged repo, grab and update all *current* resources'
foreach ($merged_repo_ids as $repo) {
    $oldRepoID = $repo["repo_ic_id"];
    $currentRepoID = $repo["current_ic_id"];


    $results = $db->query("SELECT r1.id, r1.version FROM resource_cache r1
                            INNER JOIN (select id, max(version) as version from resource_cache group by id) as r2
                            ON r1.id = r2.id and (r1.version = r2.version)
                            WHERE repo_ic_id = $1 AND NOT r1.is_deleted",
                            array($oldRepoID)
                        );
    $resources = $db->fetchAll($results);

    // Get next resource version, use for all resource inserts to save as one transaction
    $result = $db->query('select nextval(\'resource_version_id_seq\') as id', array());
    $row = $db->fetchRow($result);
    $newResourceVersion = $row["id"];


    if ($resources) {
         foreach ($resources as $resource) {
             $resourceID = $resource["id"];
             $resourceVersion = $resource["version"];
             $db->execute("update_repo_ic_id", array($newResourceVersion, $currentRepoID, $resourceID, $resourceVersion));
             echo $resourceID . "\n";
             echo $resourceVersion . "\n\n";
         }
     }

}

// TODO: Add option to Transfer HIRELATIONS in neo4j
